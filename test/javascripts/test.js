!function(){"use strict";var t="undefined"!=typeof window?window:global;if("function"!=typeof t.require){var e={},n={},r=function(t,e){return{}.hasOwnProperty.call(t,e)},i=function(t,e){var n,r,i=[];n=/^\.\.?(\/|$)/.test(e)?[t,e].join("/").split("/"):e.split("/");for(var o=0,s=n.length;s>o;o++)r=n[o],".."===r?i.pop():"."!==r&&""!==r&&i.push(r);return i.join("/")},o=function(t){return t.split("/").slice(0,-1).join("/")},s=function(e){return function(n){var r=o(e),s=i(r,n);return t.require(s,e)}},a=function(t,e){var r={id:t,exports:{}};return n[t]=r,e(r.exports,s(t),r),r.exports},l=function(t,o){var s=i(t,".");if(null==o&&(o="/"),r(n,s))return n[s].exports;if(r(e,s))return a(s,e[s]);var l=i(s,"./index");if(r(n,l))return n[l].exports;if(r(e,l))return a(l,e[l]);throw new Error('Cannot find module "'+t+'" from '+'"'+o+'"')},u=function(t,n){if("object"==typeof t)for(var i in t)r(t,i)&&(e[i]=t[i]);else e[t]=n},c=function(){var t=[];for(var n in e)r(e,n)&&t.push(n);return t};t.require=l,t.require.define=u,t.require.register=u,t.require.list=c,t.require.brunch=!0}}(),require.register("test/all",function(t,e){window.require.list().filter(function(t){return/-test$/.test(t)}).forEach(e)}),require.register("test/controllers/facility-controller-test",function(t,e){var n,r,i,o,s;n=e("controllers/facility-controller"),r=e("models/facility-inspections"),s=e("views/loading-indicator-view"),o=e("views/facility-view"),i=e("views/facility-inspections-view"),describe("FacilityController",function(){return beforeEach(function(){return this.regionShowSpy=sinon.spy(),Chaplin.mediator.setHandler("region:show",this.regionShowSpy),this.regionFindSpy=sinon.spy(),Chaplin.mediator.setHandler("region:find",this.regionFindSpy),this.regionRegisterSpy=sinon.spy(),Chaplin.mediator.setHandler("region:register",this.regionRegisterSpy),this.fetchStub=sinon.stub(r.prototype,"fetch"),sinon.stub(Chaplin.helpers,"reverse"),this.composeStub=sinon.stub(n.prototype,"compose"),this.controller=new n}),afterEach(function(){return Chaplin.mediator.removeHandlers(["region:show","region:find","region:register"]),Chaplin.helpers.reverse.restore(),this.fetchStub.restore(),this.composeStub.restore(),this.controller.dispose()}),describe("#show()",function(){return describe("setup",function(){return beforeEach(function(){return this.controller.show({license:"1234567890"})}),it("should show a loading indicator",function(){return expect(this.controller.loadingIndicatorView).to.be.an.instanceOf(s),expect(this.controller.loadingIndicatorView.autoRender).to.be["true"],expect(this.controller.loadingIndicatorView.region).to.equal("main"),expect(this.regionShowSpy.args[0]).to.deep.equal(["main",this.controller.loadingIndicatorView])}),it("should create FacilityInspections",function(){return expect(this.controller.facilityInspections).to.be.an.instanceOf(r),expect(this.controller.facilityInspections.license).to.equal("1234567890")})}),describe("loading and showing results",function(){return beforeEach(function(){return this.fetchStub.yieldsTo("success"),sinon.stub(o.prototype,"render"),sinon.stub(i.prototype,"render"),window.analytics={page:sinon.spy()},this.controller.show({license:"1234567890"})}),afterEach(function(){return o.prototype.render.restore(),i.prototype.render.restore(),delete window.analytics}),it("should fetch inspections for facility",function(){return expect(this.controller.facilityInspections.fetch).to.have.been.called}),it("should switch to the facility view",function(){return expect(this.controller.loadingIndicatorView.disposed).to.be["true"],expect(this.controller.facilityView).to.be.an.instanceOf(o),expect(this.controller.facilityView.region).to.equal("main"),expect(this.controller.facilityInspectionView).to.be.an.instanceOf(i),expect(this.controller.facilityInspectionView.region).to.equal("facilityInspections"),expect(this.controller.facilityInspectionView.collection).to.equal(this.controller.facilityInspections)}),it("should trigger analytics",function(){return expect(window.analytics.page).to.have.been.calledWith("Facility",{license:"1234567890"})})})})})}),require.register("test/controllers/home-controller-test",function(t,e){var n,r,i,o,s;i=e("controllers/home-controller"),s=e("views/search-field-view"),o=e("views/home-view"),n=e("views/about-view"),r=e("views/error-view"),describe("HomeController",function(){var t;return beforeEach(function(){return this.regionShowSpy=sinon.spy(),Chaplin.mediator.setHandler("region:show",this.regionShowSpy),sinon.stub(Chaplin.helpers,"reverse"),this.composeStub=sinon.stub(i.prototype,"compose"),this.controller=new i}),afterEach(function(){return Chaplin.mediator.removeHandlers(["region:show"]),Chaplin.helpers.reverse.restore(),this.composeStub.restore(),this.controller.dispose()}),describe("beforeAction",function(){return it("should compose the searchfield",function(){return this.controller.beforeAction(),expect(this.composeStub).to.have.been.calledWith("searchField",s,{region:"searchField"})})}),t=[{method:"show",description:"Home",view:o},{method:"about",description:"About",view:n},{method:"error",description:"Error",view:r}],_(t).each(function(t){return describe("#"+t.method+"()",function(){return beforeEach(function(){return window.analytics={page:sinon.spy()},this.controller[t.method]()}),afterEach(function(){return delete window.analytics}),it("should setup the "+t.description+" view",function(){return expect(this.controller.view).to.be.instanceOf(t.view),expect(this.controller.view.region).to.equal("main"),expect(this.regionShowSpy.args[0][0]).to.equal("main"),expect(this.regionShowSpy.args[0][1]).to.equal(this.controller.view)}),it("should call analytics",function(){return expect(analytics.page).to.have.been.calledWith(t.description)})})})})}),require.register("test/controllers/search-controller-test",function(t,e){var n,r,i,o,s;r=e("controllers/search-controller"),i=e("views/search-field-view"),n=e("models/inspections"),o=e("views/search-view"),s=e("mediator"),describe("SearchController",function(){return beforeEach(function(){return this.regionShowSpy=sinon.spy(),Chaplin.mediator.setHandler("region:show",this.regionShowSpy),this.regionRegisterSpy=sinon.spy(),Chaplin.mediator.setHandler("region:register",this.regionRegisterSpy),sinon.stub(Chaplin.helpers,"reverse"),this.composeStub=sinon.stub(r.prototype,"compose"),this.redirectStub=sinon.stub(r.prototype,"redirectTo"),this.publishStub=sinon.stub(r.prototype,"publish"),this.controller=new r,window.analytics={page:sinon.spy()}}),afterEach(function(){return Chaplin.mediator.removeHandlers(["region:show","region:register"]),Chaplin.helpers.reverse.restore(),this.publishStub.restore(),this.composeStub.restore(),this.redirectStub.restore(),this.controller.dispose(),delete window.analytics}),it("should have a publish shortcut",function(){return this.publishStub.restore(),expect(this.controller.publish).to.exist.and.be.a("function"),expect(this.controller.publish).to.equal(s.publish)}),describe("beforeAction",function(){return beforeEach(function(){return this.controller.beforeAction()}),it("should compose the searchfield",function(){return expect(this.composeStub).to.have.been.calledWith("searchField",i,{region:"searchField"})}),it("should create Inspections collection",function(){return expect(this.controller.collection).to.be.an.instanceOf(n)}),it("should create the Search view",function(){return expect(this.controller.view).to.be.an.instanceOf(o),expect(this.controller.view.region).to.equal("main"),expect(this.controller.view.collection).to.equal(this.controller.collection)})}),describe("searching",function(){return beforeEach(function(){return this.controller.beforeAction()}),describe("#search()",function(){return it("should redirect to home if no query is given",function(){return this.controller.search({}),expect(this.redirectStub).to.have.been.calledWith("home#show")}),describe("performing search",function(){return beforeEach(function(){return this.inspectionsSearchStub=sinon.stub(n.prototype,"search"),this.controller.search({query:"some query"})}),afterEach(function(){return this.inspectionsSearchStub.restore()}),it("should call #search() on the collection",function(){return expect(this.inspectionsSearchStub).to.have.been.calledWith("some query")}),it("should publish search event",function(){return expect(this.publishStub).to.have.been.calledWith("search",this.controller.collection)}),it("should call analytics",function(){return expect(window.analytics.page).to.have.been.calledWith("Text Search",{term:"some query"})})})}),null!=navigator.geolocation?describe("#geosearch()",function(){return beforeEach(function(){return this.geoSearchStub=sinon.stub(n.prototype,"geosearch"),this.getCurrentPositionStub=sinon.stub(navigator.geolocation,"getCurrentPosition"),this.getCurrentPositionStub.callsArgWith(0,{coords:{latitude:123,longitude:321}})}),afterEach(function(){return this.geoSearchStub.restore(),this.getCurrentPositionStub.restore()}),describe("setup",function(){return beforeEach(function(){return this.controller.geosearch({})}),it("should show loading indicator",function(){return expect(this.controller.view.$(".search-results-loading")).to.have.attr("style").match(/display: block/)}),it("should redirect to home when radius is not valid",function(){return expect(this.redirectStub).to.have.been.calledWith("home#show"),this.controller.geosearch({radius:"not a valid radius"}),expect(this.redirectStub).to.have.been.calledTwice})}),describe("searching",function(){return beforeEach(function(){return this.controller.geosearch({radius:"5-miles",query:"some query"})}),it("should not redirect with proper radius",function(){return expect(this.redirectStub).not.to.have.been.calledTwice}),it("should request the current position",function(){return expect(this.getCurrentPositionStub).to.have.been.called}),it("should call geosearch on inspections",function(){return expect(this.geoSearchStub).to.have.been.calledWith(123,321,5,{query:"some query"})}),it("should publish search event",function(){return expect(this.publishStub).to.have.been.calledWith("search",this.controller.collection)}),it("should call analytics",function(){return expect(window.analytics.page).to.have.been.calledWith("Geo Search",{radius:5,term:"some query"})})})}):void 0})})}),require.register("test/helper",function(){$.fn.exists=function(){return 0!==this.length}}),require.register("test/models/inspection-test",function(t,e){var n;n=e("models/inspection"),describe("Inspection model",function(){var t,e,r;return beforeEach(function(){return this.inspection=new n({inspection_id:12345})}),afterEach(function(){return this.inspection.dispose()}),it("should format `inspection_date` date with #friendlyInspectionDate",function(){var t;return t="2013-11-21T00:00:00",this.inspection.set("inspection_date",t),expect(this.inspection.friendlyInspectionDate()).to.equal(moment(t).fromNow())}),it("should format the violations field",function(){return this.inspection.set("violations","Some text | Comments: then this happened"),expect(this.inspection.formattedViolations()).to.equal("Some text <br/><br/> <br/>Comments: then this happened")}),it("should return the #fullAddress()",function(){return this.inspection.set({address:"123 Main St",city:"Chicago",state:"IL",zip:"60602"}),expect(this.inspection.fullAddress()).to.equal("123 Main St, Chicago, IL 60602")}),r=["fail","pass","pass w/ conditions","out of business","something else"],t=["danger","success","warning","default","default"],e=["fa-exclamation-triangle text-danger","fa-check-circle text-success","fa-exclamation-circle text-warning","fa-times-circle text-muted",void 0],describe("#resultCSSClass()",function(){return _(r).each(function(e,n){return it("should return "+t[n]+" for "+e,function(){return this.inspection.set("results",e),expect(this.inspection.resultCSSClass()).to.equal(t[n])})})}),describe("#resultIcon()",function(){return _(r).each(function(t,n){return it("should return "+e[n]+" for "+t,function(){return this.inspection.set("results",t),expect(this.inspection.resultIcon()).to.equal(e[n])})})})})}),require.register("test/models/inspections-test",function(t,e){var n,r,i;r=e("lib/geolocation"),i=e("models/inspections"),n=e("models/base/collection"),describe("Inspections collection",function(){return beforeEach(function(){return this.server=sinon.fakeServer.create(),this.inspections=new i,this.limit=this.inspections.limit=10,this.inspections.parseAdd=function(t){return this.add(this.parse(t))},this.triggerSpy=sinon.spy(i.prototype,"trigger"),this.fetchSpy=sinon.spy(i.prototype,"fetch")}),afterEach(function(){return this.inspections.dispose(),this.server.restore(),this.triggerSpy.restore(),this.fetchSpy.restore()}),describe("setup",function(){return it("should be a Chaplin collection",function(){return expect(this.inspections).to.be.instanceOf(n)}),it("should have a @limit",function(){return expect(this.inspections.limit).to.exist.and.be.a("number")}),it("should have a @responseLength of 0",function(){return expect(this.inspections.responseLength).to.equal(0)})}),describe("#parse()",function(){return it("should set and update @responseLength",function(){return this.inspections.parse([1,2,3,4,5]),expect(this.inspections.responseLength).to.equal(5),this.inspections.parse([1,2,3]),expect(this.inspections.responseLength).to.equal(8)}),it('should trigger "fetchedAllSearchResults"',function(){var t,e;return this.inspections.parse(function(){t=[];for(var e=1,n=this.limit;n>=1?n>=e:e>=n;n>=1?e++:e--)t.push(e);return t}.apply(this)),expect(this.triggerSpy).not.to.have.been.called,this.inspections.parse(function(){e=[];for(var t=1,n=this.limit-1;n>=1?n>=t:t>=n;n>=1?t++:t--)e.push(t);return e}.apply(this)),expect(this.triggerSpy).to.have.been.calledWith("fetchedAllSearchResults")}),it("should not add facilities that already exist",function(){var t,e;return e=function(){var e,n,r;for(r=[],t=e=1,n=this.limit;n>=1?n>=e:e>=n;t=n>=1?++e:--e)r.push({license_:t});return r}.call(this),this.inspections.parseAdd(e),expect(this.inspections).to.have.length(this.limit),this.inspections.parseAdd({license_:this.limit+1}),expect(this.inspections).to.have.length(this.limit+1),expect(this.inspections).to.have.length(this.limit+1)}),it("should sort the response by `inspection_date`",function(){var t,e,n=this;return e=function(){var e,n,r;for(r=[],t=e=1,n=this.limit;n>=1?n>=e:e>=n;t=n>=1?++e:--e)r.push({inspection_date:t,license_:t});return r}.call(this),this.inspections.parseAdd(e),this.inspections.each(function(t,e){return expect(t.get("inspection_date")).to.equal(n.limit-e)})})}),describe("#search()",function(){var t;return t=[{type:"text",string:"some text",param:"$q"},{type:"zip",string:"12345",param:"zip"}],_(t).each(function(t){return describe(""+t.type+" search",function(){return beforeEach(function(){return this.searchString=t.string,this.inspections.search(this.searchString)}),describe("getting results",function(){return it("should determine text search type",function(){return expect(this.inspections.searchType).to.equal(t.type)}),it("should set the search string",function(){return expect(this.inspections.searchString).to.equal(this.searchString)}),it("should fetch results",function(){var e,n,r,i,o;return e=this.fetchSpy.firstCall.args[0],i=this.server.requests,r=i[0],o=new URI(r.url),n=URI.parseQuery(o.query()),expect(i).to.have.length(1),expect(r.method).to.equal("GET"),expect(this.fetchSpy).to.have.been.calledOnce,expect(n).to.have.property(t.param),expect(n[t.param]).to.equal(this.searchString.replace(/\ /g,"+")),expect(e.data).to.have.property(t.param),expect(e.data[t.param]).to.equal(this.searchString)})}),describe("getting more search results",function(){return beforeEach(function(){var t,e;return t=function(){var t,n,r;for(r=[],e=t=1,n=this.limit;n>=1?n>=t:t>=n;e=n>=1?++t:--t)r.push({license_:e});return r}.call(this),this.inspections.parseAdd(t),this.inspections.search(),this.firstRequest=this.server.requests[0],this.secondRequest=this.server.requests[1]}),it("should request the same search with different offset",function(){var e,n,r,i;return n=new URI(this.firstRequest.url),i=new URI(this.secondRequest.url),e=URI.parseQuery(n.query()),r=URI.parseQuery(i.query()),expect(r[t.param]).to.exist.and.equal(e[t.param]),expect(+r.$offset).to.exist.and.equal(this.inspections.responseLength)}),it("should not remove existing results",function(){var t,e;return e=function(){var e,n,r,i;for(i=[],t=e=n=this.limit+1,r=this.limit+10;r>=n?r>=e:e>=r;t=r>=n?++e:--e)i.push({license_:t});return i}.call(this),this.secondRequest.respond(200,{"Content-Type":"application/json"},JSON.stringify(e)),this.server.respond(),expect(this.inspections).to.have.length(this.limit+10)})})})})}),describe("#geosearch()",function(){return beforeEach(function(){return this.lat=41.878114,this.lng=-87.629798,this.radius=5}),describe("setup",function(){return beforeEach(function(){return this.inspections.geosearch(this.lat,this.lng,this.radius),this.boundingRect=r.boundingRect(this.lat,this.lng,this.radius)}),it("should set search type",function(){return expect(this.inspections.searchType).to.equal("geo")}),it("should set the bounding rect",function(){return expect(this.inspections.searchBoundingRect).to.exist.and.to.deep.equal(this.boundingRect)}),it("should set the search radius",function(){return expect(this.inspections.searchRadius).to.equal(this.radius)})}),describe("without optional query",function(){return beforeEach(function(){return this.inspections.geosearch(this.lat,this.lng,this.radius)}),it("should trigger fetch",function(){return expect(this.fetchSpy).to.have.been.called}),it("should search within bounding rect",function(){var t,e;return e=this.fetchSpy.firstCall,t=e.args[0],expect(t).to.exist.and.have.deep.property("data.$where"),expect(t.data.$where).to.equal(this.boundingRect.toQuery())})}),describe("with optional query",function(){return beforeEach(function(){return this.textQuery="some text",this.inspections.geosearch(this.lat,this.lng,this.radius,{query:this.textQuery})}),it("should trigger fetch",function(){return expect(this.fetchSpy).to.have.been.called}),it("should include query in fetch",function(){var t,e;return e=this.fetchSpy.firstCall,t=e.args[0],expect(t).to.exist.and.have.deep.property("data.$where"),expect(t.data.$where).to.equal(this.boundingRect.toQuery()),expect(t).to.have.deep.property("data.$q"),expect(t.data.$q).to.equal(this.textQuery)})}),describe("getting more search results",function(){return beforeEach(function(){var t,e;return this.textQuery="someText",this.inspections.geosearch(this.lat,this.lng,this.radius,{query:this.textQuery}),t=function(){var t,n,r;for(r=[],e=t=1,n=this.limit;n>=1?n>=t:t>=n;e=n>=1?++t:--t)r.push({license_:e});return r}.call(this),this.inspections.parseAdd(t),this.inspections.geosearch(),this.firstRequest=this.server.requests[0],this.secondRequest=this.server.requests[1]}),it("should request the same search with different offset",function(){var t,e,n,r;return e=new URI(this.firstRequest.url),r=new URI(this.secondRequest.url),t=URI.parseQuery(e.query()),n=URI.parseQuery(r.query()),expect(n.$where).to.exist.and.equal(t.$where),expect(n.$q).to.exist.and.equal(t.$q)})})}),describe("#_fetchSearch()",function(){return beforeEach(function(){var t;return this.inspections._fetchSearch(),t=new URI(this.server.requests[0].url),this.parsedQuery=URI.parseQuery(t.query())}),it("should include limit",function(){return expect(this.parsedQuery).to.have.property("$limit"),expect(+this.parsedQuery.$limit).to.equal(this.inspections.limit)}),it("should request default columns",function(){return expect(this.parsedQuery).to.have.property("$select"),expect(this.parsedQuery.$select).to.equal(this.inspections.columns)})})})}),require.register("test/routes/routes-test",function(t,e){var n;n=e("routes"),describe("Routes",function(){return beforeEach(function(){return this.router=new Chaplin.Router({pushState:!1}),n(this.router.match),this.findHandler=function(t){var e;return e=this.router.findHandler(function(e){return e.route.test(t)})},this.findMatch=function(t){var e;return e=this.findHandler(t),e?""+e.route.controller+"#"+e.route.action:!1},this.getRouteParams=function(t){var e;return e=this.findHandler(t),e.route.extractParams(t)}}),afterEach(function(){return this.router.dispose()}),it("should route / to home#show",function(){return expect(this.findMatch("")).to.equal("home#show")}),it("should route /about to home#about",function(){return expect(this.findMatch("about")).to.equal("home#about")}),it("should route /search/:query to search#search",function(){return expect(this.findMatch("search/2342342")).to.equal("search#search"),expect(this.getRouteParams("search/2342342")).to.deep.equal({query:"2342342"})}),it("should route /search/within/:radius to search#geosearch",function(){return expect(this.findMatch("search/within/1-mile")).to.equal("search#geosearch"),expect(this.findMatch("search/within/5-miles")).to.equal("search#geosearch"),expect(this.findMatch("search/within/text")).to.equal(!1),expect(this.getRouteParams("search/within/1-mile")).to.deep.equal({radius:"1-mile"})}),it("should route /search/:query/within/:radius to search#geosearch",function(){return expect(this.findMatch("search/some text/within/1-mile")).to.equal("search#geosearch"),expect(this.findMatch("search/some text/within/5-mile")).to.equal("search#geosearch"),expect(this.findMatch("search/some text/within/text")).to.equal(!1),expect(this.getRouteParams("search/some text/within/1-mile")).to.deep.equal({query:"some text",radius:"1-mile"})}),it("should route /facility/:license to facility#show",function(){return expect(this.findMatch("facility/234234234")).to.equal("facility#show"),expect(this.getRouteParams("facility/234234234")).to.deep.equal({license:"234234234"})})})}),require.register("test/views/about-view-test",function(t,e){var n;n=e("views/about-view"),describe("AboutView",function(){return beforeEach(function(){return this.view=new n}),afterEach(function(){return this.view.dispose()}),it("should auto render",function(){return expect(this.view.autoRender).to.be["true"],expect(this.view.$("div")).to.exist}),it("should include current year in the copyright notice",function(){var t;return t=(new Date).getFullYear(),expect(this.view.$("#license-info")).to.contain(t)})})}),require.register("test/views/home-view-test",function(t,e){var n;n=e("views/home-view"),describe("HomeView",function(){return beforeEach(function(){return sinon.stub(Chaplin.helpers,"reverse"),this.view=new n}),afterEach(function(){return Chaplin.helpers.reverse.restore(),this.view.dispose()}),it("should auto render",function(){return expect(this.view.autoRender).to.be["true"],expect(this.view.$("div")).to.exist}),it("should link to about page",function(){return expect(Chaplin.helpers.reverse).to.have.been.calledWith("home#about")}),it("should have an image of the logo",function(){return expect(this.view.$("img.logo-image")).to.exist.and.to.have.attr("src").match(/chicago_health_logo.png/)})})}),require.register("test/views/search-field-view-test",function(t,e){var n;n=e("views/search-field-view"),describe("SearchFieldView",function(){return beforeEach(function(){return this.redirectToStub=sinon.stub(Chaplin.helpers,"redirectTo"),this.view=new n}),afterEach(function(){return this.redirectToStub.restore(),this.view.dispose()}),it("should auto render",function(){return expect(this.view.autoRender).to.be["true"],expect(this.view.$el).to.match(".search-field-container")}),it("should have a search field",function(){return expect(this.view.$("input#search-field")).to.exist}),describe("searching",function(){return beforeEach(function(){var t;return t="   some search text   ",this.view.$("#search-field").val(t)}),it("should redirect to search when form is submitted",function(){return this.view.$("#search-form").submit(),expect(this.redirectToStub).to.have.been.calledWith("search",{query:"some%20search%20text"})}),it("should redirect to search when search anywhere is clicked",function(){return this.view.$(".search-anywhere").click(),expect(this.redirectToStub).to.have.been.calledWith("search",{query:"some%20search%20text"})})}),it("should update searchfield value when a search is triggered",function(){return Chaplin.mediator.publish("search",{searchString:"some search text"}),expect(this.view.$("#search-field")).to.have.value("some search text")}),null!=navigator.geolocation?describe("geosearch",function(){return beforeEach(function(){return this.geoSearchButton=this.view.$("[data-radius]").first()}),it("should have a geosearch control",function(){return expect(this.view.$('[data-toggle="dropdown"]')).to.be.exist,expect(this.view.$("a.search-location[data-radius]")).to.exist}),it("should redirect to geosearch",function(){return this.geoSearchButton.click(),expect(this.redirectToStub).to.have.been.calledWith("geosearch",{radius:this.geoSearchButton.data("radius"),query:""})}),it("should redirect to keywordGeosearch",function(){return this.view.$("#search-field").val("some search text   "),this.geoSearchButton.click(),expect(this.redirectToStub).to.have.been.calledWith("keywordGeosearch",{radius:this.geoSearchButton.data("radius"),query:"some%20search%20text"})})}):void 0})}),require.register("test/views/search-view-test",function(t,e){var n,r,i,o,s;n=e("views/base/collection-view"),s=e("views/search-view"),r=e("models/inspections"),i=e("views/search-details-view"),o=e("views/search-get-more-view"),describe("SearchView",function(){return beforeEach(function(){return Chaplin.mediator.setHandler("region:register",sinon.spy()),Chaplin.mediator.setHandler("region:find",sinon.spy()),Chaplin.mediator.setHandler("region:show",sinon.spy()),sinon.stub(Chaplin.helpers,"reverse"),this.subviewSpy=sinon.spy(s.prototype,"subview"),this.clock=sinon.useFakeTimers(),this.collection=new r,this.view=new s({collection:this.collection})}),afterEach(function(){return Chaplin.mediator.removeHandlers(["region:register","region:find","region:show"]),Chaplin.helpers.reverse.restore(),this.subviewSpy.restore(),this.clock.restore(),this.view.dispose(),this.collection.dispose()}),it("should be a collection view",function(){return expect(this.view).to.be.an.instanceOf(n)}),it("should auto render",function(){return expect(this.view.autoRender).to.be["true"],expect(this.view.$("div")).to.exist}),it("should have a search details region",function(){return expect(this.view.regions).to.have.property("searchDetails"),expect(this.view.regions.searchDetails).to.equal(".search-details-container")}),it("should have a get more region",function(){return expect(this.view.regions).to.have.property("searchGetMore"),expect(this.view.regions.searchGetMore).to.equal(".search-results-more-container")}),describe("initial loading",function(){return beforeEach(function(){return this.collection.beginSync()}),it("should have a loading indicator",function(){return expect(this.view.loadingSelector).to.equal(".search-results-loading")}),it("should show loading indicator when collection is syncing",function(){return expect(this.view.$(".search-results-loading")).to.have.attr("style").match(/display: block/)}),it("should show loading warning after 3 seconds",function(){return expect(this.view.$(".search-results-loading-time-warning")).not.to.have["class"]("in"),this.clock.tick(3e3),expect(this.view.$(".search-results-loading-time-warning")).to.have["class"]("in")})}),describe("showing results",function(){return beforeEach(function(){var t,e;return e=function(){var e,n,r;for(r=[],t=e=1,n=this.collection.limit;n>=1?n>=e:e>=n;t=n>=1?++e:--e)r.push({license_:t,results:"Pass"});return r}.call(this),this.collection.responseLength=e.length,this.collection.reset(e)}),it("should show all of the results",function(){return expect(this.view.$(".list-group-item").length).to.equal(20)}),it("should show result details",function(){var t;return t=_(this.view.subviews).find(function(t){return"searchDetails"===t.region}),expect(t).to.be.an.instanceOf(i)}),it("should show a link to get more results",function(){var t;return t=_(this.view.subviews).find(function(t){return"searchGetMore"===t.region}),expect(t).to.be.an.instanceOf(o)}),it("should hide get more link when there are no more results",function(){var t;return this.collection.trigger("fetchedAllSearchResults"),t=_(this.view.subviews).find(function(t){return"searchGetMore"===t.region}),expect(t).to.be.undefined})}),describe("limited results",function(){return beforeEach(function(){var t,e;return e=function(){var e,n,r;for(r=[],t=e=1,n=this.collection.limit-1;n>=1?n>=e:e>=n;t=n>=1?++e:--e)r.push({license_:t,results:"Pass"});return r}.call(this)}),it("should not show get more link",function(){var t;return t=_(this.view.subviews).find(function(t){return"searchGetMore"===t.region}),expect(t).to.be.undefined})})})});